This is a log of findings during development of the slsa heuristic

Terms
-----
log message
	a string of printable characters, delimited by the operating system
	line terminator.
word	a substring inside a log message that is delimited by specific 
	delimiters, usually whitespace [this definition may need to be
	changed]
subword	a sequence inside a word that is not delimited by the usual word
	delimiters
MSA     multiple sequence alignment (like used in bioinformatics)
motif   a substring inside a log message that is frequently being
	used and has a specific syntax and semantic (e.g. an IPv4 address).
	The term is based on the idea of "sequence motif" in bioinformatics.
parser	(also "motif parser") extracts actual data matching a given motif
	from a log message.

Open Problems
-------------
[P00001] How to detect TAG?
syslog TAG does not work well with common prefix/suffix
detection. The problem is that e.g. PIX tags have integers, which
are detected and Linux logs have process IDs. The PIX integers
are actually part of the constant text, whereas in Linux it is fine
to detect them as variable part.

This problem becomes even more problematic with more agressive word
delimition (see [I00002]).

[P00002] subword detection with optional parts
Sometimes, subwords may contain optional parts, so not all words may
contain the common delimiter (e.g. Cisco PIX). In this case, subword
detection is not triggered.

Open TODO Items
---------------
[T00001] - Dictionary motif
We need to add dictionary motifs, where one can e.g. query users or common words.
It may make sense to ship some "common-word dictionaries". Common word (sets)
are like ("TCP", "UDP", "ICMP", ...) which are often found in firewall messages.
With such words, subword detection does not prove to be helpful, because it
detects a common suffix like [["TC", "UD"] "P"].

[T00002] - URL motif
Logs often contain URLs (and file pathes), just like this:
    193.45.10.119:/techsupp/css/default.css 
We need to find a proper way to identify them. This motif is probably very
broad and hard to specify, especially when thinking about multiple platforms.

Indicators in first column of actual log
----------------------------------------
- lesson learned, general info
! idea
+ result of idea
Ideas are referenced by [Innnnn] at start of log entry

Actual Log 09:55:01
----------
2015-04-14
- Cisco ASA has ample slighly different formats for specifying interface
  addresses (the faddr, gaddr, laddr parts of message). It looks like the
  log strings are written directly in code, at least we have a lot of
  small inconsistencies which suggest so. This seems to makes it impractical
  to generate a single motif for this type.
- Based on visual review, it looks like pattern detection on a subword-level
  may make sense (e.g. detect IP address, then you'll find a common slash,
  then a port number). This boils down to doing a full MSA on the word level,
  which I tried to avoid for performance reasons.
! [I00001] We may do an subword alignment on some common delimiters like slash,
  comma, colon etc. This can probably be done much faster than a full MSA.
! [I00002] We may also experiment with additional "word-delimiters", optionally
  enable those from the same set as [I00001]. When this is done, we need to make
  sure the delimiter can be stored inside the rulebase (an additional step to be
  taken only of this idea proves to be useful).

2015-04-15
+ [I0002] First rought tests indicate that additional word delimiters seem to
  work well, at least on Cisco messages.
  A problem is that TAG values are now intermangled, as a TAG typically is
  "name:" and the colon is now a word delimiter. This leads to all TAGs becoming
  one big group, and only after the colon differentiation occurs. That, however,
  is too late, especially for things like fixed-width structured formats
  (e.g. squid). This handling of the TAG is a big problem, because the TAG is
  usually the primary identifier for a message class. So it should be preserved
  as unique.
  The same problem shows up when processing Linux logs. The TAG becomes
  effectively unusable as a way to identify the message. I also have problems
  interpreting postfix logs correctly, if "[]" is part of the delimiter set.
  I have not tried yet to trace the root cause down, as the approach in general
  seems to be problematic in regard to TAG. I suspect that this "postfix problem"
  is actually related to the TAG.
  Looks like [P00001] must be looked at with priority in order to continue with
  useful analysis.
  Another problem that manual review brings up is that colon is often used e.g.
  in time formats ("12:04:11"). If we use colon as word delimiter, we are no
  longer able to detect such time formats. This suggest that more agressive
  word delimition is probably not a good thing to have. However, it looks like
  we could do the same during subword detection stage without big problems.
  Ideally, this would be a kind of alignment like proposed in [I00001].

2015-04-16
+ [I00001][I00002] Tried subword detection with colon and slash as delimiters.
  Works fine on Cisco logs and does not have any of the problem we had with
  [I0002] (as described yesterday).
  One problem is if we have something like this:
   7l:                     connection {5}
   8l:                        %posint% {5}
   9l:                           for {5}
  10l:                              outside:192.168.66.144/80 {3}
  11l:                                 (192.168.66.144/80) {3}
  12l:                                    to {3}
  13l:                                       inside:192.168.12.154/56839
  14l:                                          (217.17.249.222/56839) [nterm 1]
  13l:                                       inside:192.168.12.154/56842
  14l:                                          (217.17.249.222/56842) [nterm 1]
  13l:                                       inside:192.168.12.154/56845
  14l:                                          (217.17.249.222/31575) [nterm 1]
  The algo will explode the lower "inside:" parts individually because each
  node is of course processed individually. So the result will be:
   7l:                     connection {5}
   8l:                        %posint% {5}
   9l:                           for {5}
  10l:                              outside {subword} {3}
  11l:                                 : {subword}
  12l:                                    %ipv4% {subword}
  13l:                                       / {subword}
  14l:                                          %posint% {subword}
  15l:                                             (192.168.66.144 / 80) to {subword} {3}
  16l:                                                inside {subword}
  17l:                                                   : {subword}
  18l:                                                      %ipv4% {subword}
  19l:                                                         / {subword}
  20l:                                                            %posint% {subword}
  21l:                                                               (217.17.249.222 / 56839) {subword}
  16l:                                                inside {subword}
  17l:                                                   : {subword}
  18l:                                                      %ipv4% {subword}
  19l:                                                         / {subword}
  20l:                                                            %posint% {subword}
  21l:                                                               (6.79.249.222 / 56842) {subword}
  16l:                                                inside {subword}
  17l:                                                   : {subword}
  18l:                                                      %ipv4% {subword}
  19l:                                                         / {subword}
  20l:                                                            %posint% {subword}
  21l:                                                               (217.17.249.222 / 31575) {subword}
  However, we expect that this will not affect the final rule generation. But
  needs to be proven. [I00003] Once we have split subwords, we may do another
  "alignment run" on the tree and check if we now can find additional things
  to combine. Needs to be seen. In any case, we need to split braces, which
  requires slight changes to the split algo.
  We also see that the subword split algo does not work properly if we have
  words of different formats. Cisco PIX, for example, has interface specifiers
  which may either be "IP" or "IP/PORT" (among others). In that case, the
  delimiter "/" is not detected as common delimiter and so subword detection
  is not triggered. Now tracked as [P00002].

- I had a frist try at using "=" as a subword delimiter. This works for
  name=value fields, but only if they are all in the same sequence. It
  looks like it is a much better idea, for real N=V type of log messages
  to generate an parser that works on the complete line (things like
  iptables). It may still make sense to have individual N=V parsers if these
  constructs are seen within otherwise non-structured messages.
